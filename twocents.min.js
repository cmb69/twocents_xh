/**
 * Copyright 2014-2025 Christoph M. Becker
 *
 * This file is part of Twocents_XH.
 *
 * Twocents_XH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Twocents_XH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Twocents_XH.  If not, see <http://www.gnu.org/licenses/>.
 */

var init;

var conf;

var each = Array.prototype.forEach;

function doGetRequest(url) {
    var request = new XMLHttpRequest();
    request.open("GET", xhrUrl(url));
    request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    request.onreadystatechange = (function onreadystatechange() {
        var request = this;
        if (request.readyState === 4 && request.status === 200) {
            each.call(document.querySelectorAll(".twocents_container"), function (container) {
                container.innerHTML = request.responseText;
                init();
                container.className = container.className.replace(/ twocents_loading$/, "");
            });
            if (history.state.twocents_url !== url) {
                let state = Object.assign({}, history.state, {"twocents_url": request.responseURL});
                history.pushState(state, document.title, request.responseURL);
            }
        }
    });
    request.send(null);
    each.call(document.querySelectorAll(".twocents_container"), function (container) {
        container.className += " twocents_loading";
    });
}

function doPostRequest(url, payload) {
    var request = new XMLHttpRequest();
    request.open("POST", xhrUrl(url));
    request.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    request.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    request.onreadystatechange = (function () {
        var request = this;
        if (request.readyState === 4 && request.status === 200) {
            each.call(document.querySelectorAll(".twocents_container"), function (container) {
                container.innerHTML = request.responseText;
                container.className = container.className.replace(/ twocents_loading$/, "");
            });
            init();
            if (request.responseURL !== url) {
                let state = Object.assign({}, history.state, {"twocents_url": request.responseURL});
                history.pushState(state, document.title, request.responseURL);
            }
        }
    });
    request.send(payload);
    each.call(document.querySelectorAll(".twocents_container"), function (container) {
        container.className += " twocents_loading";
    });
}

function xhrUrl(url) {
    return url.replace(/&[^&#]+/g, function (param) {
        return param.match(/^&twocents_/) ? param : "";
    });
}

function ajaxifyPagination() {
    each.call(document.querySelectorAll(".twocents_pagination a"), function (anchor) {
        anchor.onclick = (function () {
            doGetRequest(this.href);
            return false;
        });
    });
}

function ajaxifyAdminTools() {
    var currentButton;
    each.call(document.querySelectorAll(".twocents_admin_tools form button"), function (button) {
        button.onclick = (function () {
            currentButton = this;
        });
    });
    each.call(document.querySelectorAll(".twocents_admin_tools form"), function (form) {
        form.onsubmit = (function () {
            if ("confirm" in currentButton.dataset) {
                var confirmed = window.confirm(JSON.parse(currentButton.dataset.confirm));
                if (!confirmed) {
                    return false;
                }
            }
            var params = [];
            each.call([this["xh_csrf_token"], currentButton], function (element) {
                params.push(encodeURIComponent(element.name) + "=" + encodeURIComponent(element.value));
            });
            doPostRequest(currentButton.formAction, params.join("&"));
            return false;
        });       
    });
}

/**
 * Convert all relevant anchor elements to buttons.
 *
 * @returns {undefined}
 */
function convertAnchorsToButtons() {
    const selector = ".twocents_admin_tools a, .twocents_new_comment a, .twocents_form_buttons a";
    each.call(document.querySelectorAll(selector), function (anchor) {
        var button = document.createElement("button");
        //button.type = "button";
        button.setAttribute("type", "button");
        button.onclick = (function () {
            doGetRequest(anchor.href);
            return false;
        });
        button.innerHTML = anchor.innerHTML;
        anchor.parentNode.replaceChild(button, anchor);
    });
}

/**
 * Serializes (application/x-www-form-urlencoded) the form data.
 *
 * @returns {string}
 */
function serialize(form) {
    var params, pairs, prop;

    params = {};
    each.call(form.querySelectorAll("[name]"), function (element) {
        params[element.name] = element.value;
    });
    pairs = [];
    for (prop in params) {
        if (params.hasOwnProperty(prop)) {
            pairs.push(encodeURIComponent(prop) + "=" +
                        encodeURIComponent(params[prop]));
        }
    }
    return pairs.join("&");
}

/**
 * Prepares the form.
 *
 * @returns {undefined}
 */
function prepareForm() {

    /**
     * Updates the textarea from the content-editable.
     *
     * @param {Event} event
     *
     * @returns {boolean}
     */
    function update(form) {
        each.call(form.querySelectorAll(".twocents_editor"), function (editor) {
            each.call(form.querySelectorAll("textarea"), function (textarea) {
                textarea.value = editor.innerHTML;
            });
        });
        return true;
    }
    
    each.call(document.querySelectorAll(".twocents_form"), function (form) {
        conf = JSON.parse(form.dataset.config);
    });
    each.call(document.querySelectorAll(".twocents_form_buttons button"), function (button) {
        if (button.name === "twocents_do") {
            button.form.onsubmit = (function () {
                update(this);
                doPostRequest(this.action, serialize(this));
                return false;
            });
        } else if (button.type === "reset") {
            button.onclick = (function () {
                var form = this.form;
                each.call(document.querySelectorAll(".twocents_editor", form), function (editor) {
                    editor.innerHTML = form.elements.twocents_message.value;
                });
            });
        }
    });
}

/**
 * Makes an editor.
 *
 * @param {HTMLTextAreaElement} textarea
 *
 * @returns {undefined}
 */
function makeEditor(textarea) {
    var div, button, div2, buttons, prop;

    var updateButtonStates = (function () {
        var button, state;

        button = document.getElementById("twocents_tool_bold");
        button.disabled = !document.queryCommandEnabled("bold");
        state = document.queryCommandState("bold");
        button.style.borderStyle = state ? "inset" : "";
        button = document.getElementById("twocents_tool_italic");
        button.disabled = !document.queryCommandEnabled("italic");
        state = document.queryCommandState("italic");
        button.style.borderStyle = state ? "inset" : "";
        button = document.getElementById("twocents_tool_link");
        button.disabled = !document.queryCommandEnabled("createLink");
        button = document.getElementById("twocents_tool_unlink");
        button.disabled = !document.queryCommandEnabled("unlink");
    });

    div2 = document.createElement("div");
    div2.className = "twocents_editor_toolbar";
    div = document.createElement("div");
    div.className = "twocents_editor";
    div.innerHTML = textarea.value;
    textarea.parentNode.parentNode.appendChild(div2);
    textarea.parentNode.parentNode.appendChild(div);
    textarea.style.display = "none";
    buttons = ({
        bold: (function () {
            document.execCommand("bold");
            div.focus();
            updateButtonStates();
        }),
        italic: (function () {
            document.execCommand("italic");
            div.focus();
            updateButtonStates();
        }),
        link: (function () {
            var url = window.prompt(conf.message_link, "");
            if (url) {
                document.execCommand("createLink", false, url);
            }
            div.focus();
            updateButtonStates();
        }),
        unlink: (function () {
            document.execCommand("unlink");
            div.focus();
            updateButtonStates();
        })
    });
    for (prop in buttons) {
        if (buttons.hasOwnProperty(prop)) {
            button = document.createElement("button");
            button.id = "twocents_tool_" + prop;
            //button.type = "button";
            button.setAttribute("type", "button");
            button.innerHTML = conf["label_" + prop];
            button.onclick = buttons[prop];
            div2.appendChild(button);
        }
    }
    div.contentEditable = true;
    div.onkeypress = (function () {
        var textContent = div.textContent || div.innerText;
        if (!textContent) {
            document.execCommand("formatBlock", false, "P");
        }
    });
    div.onkeyup = updateButtonStates;
    div.onmouseup = updateButtonStates;
    textarea.required = false;
    textarea.parentNode.onclick = (function () {
        div.focus();
    });
    updateButtonStates();
}

function isRteSupported() {
    var div = document.createElement("div");
    return (typeof div.contentEditable !== "undefined" &&
            typeof document.execCommand !== "undefined");
}

/**
 * Initializes the plugin.
 *
 * @returns {undefined}
 */
init = function () {
    ajaxifyPagination();
    convertAnchorsToButtons();
    ajaxifyAdminTools();
    prepareForm();
    if (conf && conf.comments_markup === "HTML") {
        if (isRteSupported()) {
            each.call(document.querySelectorAll("textarea[name='twocents_message']"), function (textarea) {
                makeEditor(textarea);
            })
        }
    }
};

let state = Object.assign({}, history.state, {"twocents_url": location.href});
history.replaceState(state, document.title, location.href);
window.addEventListener("popstate", function (event) {
    if ("state" in event && "twocents_url" in event.state) {
        doGetRequest(event.state.twocents_url);
    }
})

init();
