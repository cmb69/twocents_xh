/**
 * Copyright 2014-2025 Christoph M. Becker
 *
 * This file is part of Twocents_XH.
 *
 * Twocents_XH is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Twocents_XH is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Twocents_XH.  If not, see <http://www.gnu.org/licenses/>.
 */

// @ts-check

var init;

var conf;

/**
 * @param {string} url 
 */
function doGetRequest(url) {
    var request = new XMLHttpRequest();
    request.open("GET", url);
    request.setRequestHeader("X-CMSimple-XH-Request", "twocents");
    request.onreadystatechange = function onreadystatechange() {
        if (request.readyState === 4 && request.status === 200) {
            document.querySelectorAll(".twocents_container").forEach(container => {
                container.innerHTML = request.responseText;
                init();
                container.classList.remove("twocents_loading");
            });
            if (history.state.twocents_url !== url) {
                let state = Object.assign({}, history.state, {"twocents_url": request.responseURL});
                history.pushState(state, document.title, request.responseURL);
            }
        }
    };
    request.send(null);
    document.querySelectorAll(".twocents_container").forEach(container => {
        container.classList.add("twocents_loading");
    });
}

/**
 * @param {string} url
 * @param {FormData} payload
 * @returns {void}
 */
function doPostRequest(url, payload) {
    var request = new XMLHttpRequest();
    request.open("POST", url);
    request.setRequestHeader("X-CMSimple-XH-Request", "twocents");
    request.onreadystatechange = () => {
        if (request.readyState === 4 && request.status === 200) {
            document.querySelectorAll(".twocents_container").forEach(container => {
                container.innerHTML = request.responseText;
                container.classList.remove("twocents_loading");
            });
            init();
            if (request.responseURL !== url) {
                let state = Object.assign({}, history.state, {"twocents_url": request.responseURL});
                history.pushState(state, document.title, request.responseURL);
            }
        }
    };
    request.send(payload);
    document.querySelectorAll(".twocents_container").forEach(container => {
        container.classList.add("twocents_loading");
    });
}

/**
 * @returns {void}
 */
function ajaxifyPagination() {
    document.querySelectorAll(".twocents_pagination a").forEach(anchor => {
        if (!(anchor instanceof HTMLAnchorElement)) return;
        anchor.onclick = event => {
            doGetRequest(anchor.href);
            event.preventDefault();
        };
    });
}

/**
 * @returns {void}
 */
function ajaxifyAdminTools() {
    var currentButton;
    document.querySelectorAll(".twocents_admin_tools form button").forEach(button => {
        if (!(button instanceof HTMLButtonElement)) return;
        button.onclick = () => {
            currentButton = button;
        };
    });
    document.querySelectorAll(".twocents_admin_tools form").forEach(form => {
        if (!(form instanceof HTMLFormElement)) return;
        form.onsubmit = event => {
            if ("confirm" in currentButton.dataset) {
                var confirmed = window.confirm(JSON.parse(currentButton.dataset.confirm));
                if (!confirmed) {
                    event.preventDefault();
                }
            }
            doPostRequest(currentButton.formAction, new FormData(form, currentButton));
            event.preventDefault();
        };
    });
}

/**
 * @returns {void}
 */
function convertAnchorsToButtons() {
    const selector = ".twocents_admin_tools a, .twocents_new_comment a, .twocents_form_buttons a";
    document.querySelectorAll(selector).forEach(anchor => {
        if (!(anchor instanceof HTMLAnchorElement) || anchor.parentElement === null) return;
        var button = document.createElement("button");
        //button.type = "button";
        button.setAttribute("type", "button");
        button.onclick = event => {
            doGetRequest(anchor.href);
            event.preventDefault();
        };
        button.innerHTML = anchor.innerHTML;
        anchor.parentElement.replaceChild(button, anchor);
    });
}

/**
 * @returns {void}
 */
function prepareForm() {

    /**
     * @param {HTMLFormElement} form
     * @returns {boolean}
     */
    function update(form) {
        form.querySelectorAll(".twocents_editor").forEach(editor => {
            form.querySelectorAll("textarea").forEach(textarea => {
                textarea.value = editor.innerHTML;
            });
        });
        return true;
    }
    
    document.querySelectorAll(".twocents_form").forEach(form => {
        if (!(form instanceof HTMLFormElement)) return;
        conf = JSON.parse(form.dataset.config || "");
    });
    document.querySelectorAll(".twocents_form_buttons button").forEach(button => {
        if (!(button instanceof HTMLButtonElement) || button.form === null) return;
        if (button.name === "twocents_do") {
            let form = button.form;
            button.form.onsubmit = event => {
                update(form);
                doPostRequest(form.action, new FormData(form, button));
                event.preventDefault();
            };
        } else if (button.type === "reset") {
            button.onclick = () => {
                if (button.form === null) return;
                var form = button.form;
                document.querySelectorAll(".twocents_editor").forEach(editor => {
                    let textarea = form.elements.namedItem("twocents_message");
                    if (!(textarea instanceof HTMLTextAreaElement)) return;
                    editor.innerHTML = textarea.value;
                });
            };
        }
    });
}

/**
 * @param {HTMLTextAreaElement} textarea
 * @returns {void}
 */
function makeEditor(textarea) {
    var div, button, div2, buttons, prop;

    var updateButtonStates = () => {
        var button, state;

        button = document.querySelector("#twocents_tool_bold");
        if (button instanceof HTMLButtonElement) {
            button.disabled = !document.queryCommandEnabled("bold");
            state = document.queryCommandState("bold");
            button.style.borderStyle = state ? "inset" : "";
        }
        button = document.querySelector("#twocents_tool_italic");
        if (button instanceof HTMLButtonElement) {
            button.disabled = !document.queryCommandEnabled("italic");
            state = document.queryCommandState("italic");
            button.style.borderStyle = state ? "inset" : "";
        }
        button = document.querySelector("#twocents_tool_link");
        if (button instanceof HTMLButtonElement) {
            button.disabled = !document.queryCommandEnabled("createLink");
        }
        button = document.querySelector("#twocents_tool_unlink");
        if (button instanceof HTMLButtonElement) {
            button.disabled = !document.queryCommandEnabled("unlink");
        }
    };

    if (textarea.parentElement === null || textarea.parentElement.parentElement === null) return;
    div2 = document.createElement("div");
    div2.className = "twocents_editor_toolbar";
    div = document.createElement("div");
    div.className = "twocents_editor";
    div.innerHTML = textarea.value;
    textarea.parentElement.parentElement.appendChild(div2);
    textarea.parentElement.parentElement.appendChild(div);
    textarea.style.display = "none";
    buttons = [
        {
            name: "bold",
            handler: () => {
                document.execCommand("bold");
                div.focus();
                updateButtonStates();
            },
        }, {
            name: "italic",
            handler: () => {
                document.execCommand("italic");
                div.focus();
                updateButtonStates();
            },
        }, {
            name: "link", 
            handler: () => {
                var url = window.prompt(conf.message_link, "");
                if (url) {
                    document.execCommand("createLink", false, url);
                }
                div.focus();
                updateButtonStates();
            },
        }, {
            name: "unlink",
            handler: () => {
                document.execCommand("unlink");
                div.focus();
                updateButtonStates();
            },
        }
    ];
    for (let but of buttons) {
        button = document.createElement("button");
        button.id = "twocents_tool_" + but.name;
        button.type = "button";
        button.innerHTML = conf["label_" + but.name];
        button.onclick = but.handler;
        div2.appendChild(button);
    }
    div.contentEditable = "true";
    div.onkeypress = () => {
        var textContent = div.textContent || div.innerText;
        if (!textContent) {
            document.execCommand("formatBlock", false, "P");
        }
    };
    div.onkeyup = updateButtonStates;
    div.onmouseup = updateButtonStates;
    textarea.required = false;
    textarea.parentElement.onclick = () => {
        div.focus();
    };
    updateButtonStates();
}

/**
 * @returns {boolean}
 */
function isRteSupported() {
    var div = document.createElement("div");
    return typeof div.contentEditable !== "undefined" &&
            typeof document.execCommand !== "undefined";
}

/**
 * @returns {void}
 */
init = () => {
    ajaxifyPagination();
    convertAnchorsToButtons();
    ajaxifyAdminTools();
    prepareForm();
    if (conf && conf.comments_markup === "HTML") {
        if (isRteSupported()) {
            document.querySelectorAll("textarea[name='twocents_message']").forEach(textarea => {
                if (!(textarea instanceof HTMLTextAreaElement)) return;
                makeEditor(textarea);
            });
        }
    }
};

let state = Object.assign({}, history.state, {"twocents_url": location.href});
history.replaceState(state, document.title, location.href);
addEventListener("popstate", event => {
    if ("state" in event && "twocents_url" in event.state) {
        doGetRequest(event.state.twocents_url);
    }
});

init();
